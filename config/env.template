# =========================================
# TMIV Advanced ML Platform – env template
# Kopiuj jako .env (lokalnie). Nie commituj.
# =========================================

# App basics
APP_NAME="TMIV Advanced ML Platform"
ENV="development"                 # development | staging | production
LOG_LEVEL="INFO"                  # DEBUG | INFO | WARNING | ERROR

# Paths (możesz zostawić puste; mamy domyślne)
DATA_DIR=""                       # np. ./data
TMIV_CACHE_DIR=""                 # np. ./cache
TMIV_EXPORTS_DIR=""               # np. ./exports

# Security / crypto (opcjonalne)
# Wygeneruj klucz Fernet (base64 urlsafe 32B) i wklej tu, by szyfrować klucze w sesji:
# python -c "import base64,os;print(base64.urlsafe_b64encode(os.urandom(32)).decode())"
TMIV_FERNET_KEY=""

# LLM / providers (opcjonalne – uzupełnij jeśli korzystasz)
OPENAI_API_KEY=""
ANTHROPIC_API_KEY=""
HUGGINGFACE_API_KEY=""
HF_TOKEN=""
OPENROUTER_API_KEY=""
COHERE_API_KEY=""
AZURE_OPENAI_API_KEY=""
AZURE_OPENAI_ENDPOINT=""          # np. https://<resource>.openai.azure.com/

# Database (opcjonalna; jeśli puste – lokalnie sqlite/duckdb w kodzie)
# Przykłady:
#   SQLite  : sqlite:///tmiv.db
#   DuckDB  : duckdb:///tmiv.duckdb
#   Postgres: postgresql+psycopg2://user:pass@host:5432/dbname
DATABASE_URL=""

# Telemetry / OpenTelemetry (opcjonalne)
TMIV_TELEMETRY="on"               # on | off
TMIV_TELEMETRY_EXPORTER="auto"    # auto | otlp | console | none
TMIV_OTLP_ENDPOINT=""             # np. https://otel-collector.example.com
OTEL_EXPORTER_OTLP_ENDPOINT=""
OTEL_EXPORTER_OTLP_HEADERS=""     # np. "Authorization=Bearer xxx,Another=yyy"
OTEL_RESOURCE_ATTRIBUTES="service.name=tmiv,service.version=dev"

# Training defaults (opcjonalne)
TMIV_N_JOBS="-1"                  # -1 = wszystkie rdzenie
TMIV_RANDOM_STATE="42"

# Streamlit (opcjonalne – lokalnie)
STREAMLIT_SERVER_PORT="8501"
STREAMLIT_BROWSER_GATHER_USAGE_STATS="false"
