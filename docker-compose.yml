version: '3.8'

services:
  # ==================== BACKEND ====================
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: tmiv-backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app/backend
      - ./uploads:/app/uploads
      - ./artifacts:/app/artifacts
      - ./logs:/app/logs
    environment:
      - ENVIRONMENT=production
      - DEBUG=False
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - POSTGRESQL_URL=postgresql://tmiv:tmiv_password@postgres:5432/tmiv
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - postgres
      - redis
      - mlflow
    networks:
      - tmiv-network
    restart: unless-stopped
    command: uvicorn backend.app:app --host 0.0.0.0 --port 8000

  # ==================== FRONTEND ====================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: tmiv-frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/src:/app/src
    environment:
      - REACT_APP_API_URL=http://localhost:8000
    depends_on:
      - backend
    networks:
      - tmiv-network
    restart: unless-stopped

  # ==================== MLFLOW ====================
  mlflow:
    image: ghcr.io/mlflow/mlflow:latest
    container_name: tmiv-mlflow
    ports:
      - "5000:5000"
    volumes:
      - ./mlruns:/mlflow/mlruns
      - ./mlartifacts:/mlflow/mlartifacts
    environment:
      - BACKEND_STORE_URI=postgresql://tmiv:tmiv_password@postgres:5432/mlflow
      - ARTIFACT_ROOT=/mlflow/mlartifacts
    depends_on:
      - postgres
    networks:
      - tmiv-network
    restart: unless-stopped
    command: >
      mlflow server
      --backend-store-uri postgresql://tmiv:tmiv_password@postgres:5432/mlflow
      --default-artifact-root /mlflow/mlartifacts
      --host 0.0.0.0
      --port 5000

  # ==================== POSTGRES ====================
  postgres:
    image: postgres:15-alpine
    container_name: tmiv-postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_USER=tmiv
      - POSTGRES_PASSWORD=tmiv_password
      - POSTGRES_DB=tmiv
    networks:
      - tmiv-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tmiv"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ==================== REDIS ====================
  redis:
    image: redis:7-alpine
    container_name: tmiv-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - tmiv-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ==================== NGINX (Optional) ====================
  nginx:
    image: nginx:alpine
    container_name: tmiv-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    networks:
      - tmiv-network
    restart: unless-stopped

  # ==================== PROMETHEUS (Optional) ====================
  prometheus:
    image: prom/prometheus:latest
    container_name: tmiv-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - tmiv-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  # ==================== GRAFANA (Optional) ====================
  grafana:
    image: grafana/grafana:latest
    container_name: tmiv-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=redis-datasource
    depends_on:
      - prometheus
    networks:
      - tmiv-network
    restart: unless-stopped

# ==================== VOLUMES ====================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# ==================== NETWORKS ====================
networks:
  tmiv-network:
    driver: bridge